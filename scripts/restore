#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

# Keep this path for calling _common.sh inside the execution's context of backup and restore scripts
source ../settings/scripts/_common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

firmware_nonfree=$(ynh_app_setting_get --app=$app --key=firmware_nonfree)
service_name=$(ynh_app_setting_get --app=$app --key=service_name)

#=================================================
# CHECK IF THE APP CAN BE RESTORED
#=================================================
ynh_script_progression --message="Validating restoration parameters..."

# Meh idk where to put this ... On RPi, by default wlan is blocked
if test -e /usr/sbin/rfkill && rfkill | grep wlan | grep -q -w 'blocked'
then
    ynh_print_info "Unblocking wlan interface..."
    /usr/sbin/rfkill unblock wlan
fi

#=================================================
# STANDARD RESTORATION STEPS
#=================================================
#=================================================
# RECREATE THE DEDICATED USER
#=================================================
ynh_script_progression --message="Recreating the dedicated system user..."

# Create the dedicated user (if not existing)
ynh_system_user_create --username=$app


if [[ $firmware_nonfree -eq 1 ]]; then
	check_armbian_nonfree_conflict
	ynh_install_extra_app_dependencies --repo="deb http://deb.debian.org/debian $(ynh_get_debian_release) non-free" --package="$nonfree_firmware_packages"
else
	pkg_dependencies="$pkg_dependencies $free_firmware_packages"
fi

for FILE in $(ls /etc/hostapd/hostapd.conf{.tpl?,} 2>/dev/null)
do
    ynh_restore_file --origin_path="$FILE"
done
ynh_restore_file --origin_path="/etc/dnsmasq.dhcpd/dhcpdv6.conf.tpl"
ynh_restore_file --origin_path="/etc/dnsmasq.dhcpd/dhcpdv4.conf.tpl"

ynh_restore_file --origin_path="/usr/local/bin/$service_name"

ynh_restore_file --origin_path="/etc/openvpn/scripts/route-up.d/90-hotspot"
ynh_restore_file --origin_path="/etc/openvpn/scripts/route-down.d/90-hotspot"

ynh_restore_file --origin_path="/etc/init.d/hostapd"

#=================================================
# SPECIFIC RESTORATION
#=================================================
# REINSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Reinstalling dependencies..."

# Define and install dependencies
ynh_install_app_dependencies $pkg_dependencies

#=================================================
# RESTORE SYSTEMD
#=================================================
ynh_script_progression --message="Restoring the systemd configuration..."

ynh_restore_file --origin_path="/etc/systemd/system/$service_name.service"
systemctl enable $service_name.service --quiet

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add $service_name --description "Creates a Wi-Fi access point" --test_status "systemctl is-active hostapd"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..."

hot_reload_usb_wifi_cards
wifi_device=$(iw_devices | awk -F\| '{ print $1 }')

if [[ -z $wifi_device ]]; then
	ynh_app_setting_set --app=$app --key=service_enabled --value=0
else
	ynh_app_setting_set --app=$app --key=service_enabled --value=1
fi

# Start a systemd service if device is present
if [[ $wifi_device == "" ]]; then
	echo "WARNING: Wifi Hotspot is not started because no wifi device was found (please, check the web admin)" >&2
else
	ynh_systemd_action --service_name=$service_name --action="start" --log_path=systemd #--line_match="Started YunoHost Wifi Hotspot"
fi

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Restoration completed for $app"
